<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TgenNetProtocol</name>
    </assembly>
    <members>
        <member name="T:TgenNetProtocol.ClientData">
            <summary>
            A struct made to keep track of clients for the serverManager
            </summary>
        </member>
        <member name="E:TgenNetProtocol.ClientManager.OnDisconnect">
            <summary>
            On connection aborted
            </summary>
        </member>
        <member name="P:TgenNetProtocol.ClientManager.Active">
            <summary>
            Checks if the listener for messages is active
            </summary>
        </member>
        <member name="F:TgenNetProtocol.ClientManager.makeAttempts">
            <summary>
            This bool sets attempts, if set to true the client will attempt to connect the server 4 times before giving up else the client only tries 1 time
            default is False
            </summary>
        </member>
        <member name="M:TgenNetProtocol.ClientManager.Connect(System.String,System.Int32)">
            <summary>
            Connects the client to the server based on the given Ip and Port
            </summary>
            <param name="ip">The server Ip</param>
            <param name="port">The port</param>
            <returns>if connected successfully returns true, else false</returns>
        </member>
        <member name="E:TgenNetProtocol.ControlledClient.ReceivedPacket">
            <summary>
            Fires an event each time a packet is received, Only works if called the HandlePackets method!
            </summary>
        </member>
        <member name="P:TgenNetProtocol.ControlledClient.IsHandlingPackets">
            <summary>
            Is the instance handling packets
            </summary>
        </member>
        <member name="P:TgenNetProtocol.ControlledClient.Active">
            <summary>
            Is the instance active or disposed
            </summary>
        </member>
        <member name="M:TgenNetProtocol.ControlledClient.Send(TgenSerializer.BinaryBuilder)">
            <summary>
            Sends any primitive type (int, string, byte) and byte array (byte[])
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:TgenNetProtocol.INetworkObject.Dispose">
            <summary>
            Dispose stops the broadcast for this object
            this object won't recive any of the incoming packets and it's methods won't be invoked
            </summary>
        </member>
        <member name="M:TgenNetProtocol.FormNetworkBehavour.AddToAttributes">
            <summary>
            This method makes sure the other threads that sends message isn't getting effected while it's active
            Things can break if two thread work on the same variable/method
            </summary>
        </member>
        <member name="M:TgenNetProtocol.FormNetworkBehavour.Dispose">
            <summary>
            Removes the object's methods from the network calls
            </summary>
        </member>
        <member name="M:TgenNetProtocol.FormNetworkBehavour.InvokeNetworkMethods(System.Reflection.MethodInfo,System.Object[],System.Object)">
            <summary>
            will not work on static methods
            </summary>
            <param name="method">The Method to invoke</param>
            <param name="objetsToSend">the arguments the Method takes</param>
            <param name="ObjectThatOwnsTheMethod">The object that 'owns' the method</param>
        </member>
        <member name="F:TgenNetProtocol.FormNetworkBehavour.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TgenNetProtocol.FormNetworkBehavour.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TgenNetProtocol.FormNetworkBehavour.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:TgenNetProtocol.MonoNetwork.Update">
            <summary>
            Being called each frame, syncs the game engine with function's invoking order
            </summary>
        </member>
        <member name="M:TgenNetProtocol.MonoNetwork.AddToAttributes">
            <summary>
            This method makes sure the other threads that sends message isn't getting effected while it's active
            Things can break if two thread work on the same variable/method
            </summary>
        </member>
        <member name="M:TgenNetProtocol.MonoNetwork.InvokeNetworkMethods(System.Reflection.MethodInfo,System.Object[],System.Object)">
            <summary>
            will not work on static methods
            </summary>
            <param name="method">The Method to invoke</param>
            <param name="objetsToSend">the arguments the Method takes</param>
            <param name="ObjectThatOwnsTheMethod">The object that 'owns' the method</param>
        </member>
        <member name="E:TgenNetProtocol.NetworkBehavour.NetworkMethodEvent">
            <summary>
            What's for?
            </summary>
        </member>
        <member name="M:TgenNetProtocol.NetworkBehavour.AddToAttributes">
            <summary>
            This method makes sure the other threads that sends message isn't getting effected while it's active
            Things can break if two thread work on the same variable/method
            </summary>
        </member>
        <member name="M:TgenNetProtocol.ServerManager.AbortClient(TgenNetProtocol.ClientData)">
            <summary>
            Is called to disconnect a client from the server (Close communications)
            </summary>
            <param name="client">The id of the client</param>
        </member>
        <member name="M:TgenNetProtocol.ServerManager.DropClient(TgenNetProtocol.ClientData)">
            <summary>
            The Server uses this function to drop inactive clients
            (Clients that disconnected/had a socket error)
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:TgenNetProtocol.ServerManager.KickClient(TgenNetProtocol.ClientData)">
            <summary>
            Stop and drop communications with a client
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:TgenNetProtocol.ServerManager.Send(System.Object,TgenNetProtocol.ClientData,System.Boolean)">
            <summary>
            Sends a message to a specific client based on the client's ID
            </summary>
            <param name="Message">The message you want to send</param>
            <param name="client">The id of the client who's supposed to get the message</param>
            <param name="throwOnError">Throw exception on failed send</param>
        </member>
        <member name="M:TgenNetProtocol.ServerManager.SendToAll(System.Object,System.Boolean)">
            <summary>
            Sends a message to all connected client,
            </summary>
            <param name="Message">The message you want to send</param>
            <param name="throwOnError">Throw exception on failed send</param>
        </member>
        <member name="M:TgenNetProtocol.ServerManager.Stop">
            <summary>
            Stops the listener but keeps all the connected clients.
            Will not accept any incoming clients
            </summary>
        </member>
        <member name="M:TgenNetProtocol.ServerManager.Close">
            <summary>
            Stops the listener then aborts all the connected client before it aborts the thread that listens to incoming clients
            </summary>
        </member>
        <member name="M:TgenNetProtocol.ServerManager.Dispose">
            <summary>
            Closes the server
            </summary>
        </member>
        <member name="F:TgenNetProtocol.TypeSetter.isWorking">
            <summary>
            this bool lets other threads know if a message is being send
            the sending proccess takes time and cannot get changed at run-time (things might break)
            </summary>
        </member>
        <member name="M:TgenNetProtocol.TypeSetter.SendNewServerMessage(System.Object,TgenNetProtocol.ClientData)">
            <summary>
            Called when a packet is received from a client
            this method invokes server network methods on all active network objects
            </summary>
            <param name="message">The sent object (Payload)</param>
            <param name="clientInfo">The client who sent the info</param>
        </member>
        <member name="M:TgenNetProtocol.TypeSetter.IsGetClientInfo(System.Reflection.MethodInfo)">
            <summary>
            Checks if the method wants the id of the client
            </summary>
            <param name="method">The method</param>
            <returns></returns>
        </member>
        <member name="M:TgenNetProtocol.TypeSetter.SendNewClientMessage(System.Object)">
            <summary>
            Called when a packet is received from the server
            this method invokes client network methods on all active network objects
            </summary>
            <param name="message">The sent object (Payload)</param>
        </member>
    </members>
</doc>
